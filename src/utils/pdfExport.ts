
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { format } from 'date-fns';

// Define the meeting type
interface Meeting {
  id: string | number;
  title: string;
  startTime: Date;
  endTime: Date;
  description?: string;
  location?: string;
  participants?: string[];
  color?: string;
  isRecurring?: boolean;
  recurringPattern?: string;
  notes?: string[];
  reminders?: {
    time: Date;
    type: 'email' | 'notification' | 'custom';
  }[];
}

// Function to export a meeting to PDF and download it
export const exportMeetingToPDF = (meeting: Meeting): void => {
  // Initialize jsPDF
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  // Add title
  doc.setFontSize(22);
  doc.setTextColor(59, 130, 246); // Blue color
  doc.text('Meeting Details', 105, 20, { align: 'center' });
  
  // Add logo or branding
  doc.setFontSize(14);
  doc.setTextColor(107, 114, 128); // Gray color
  doc.text('MeetEase', 105, 30, { align: 'center' });
  
  // Add meeting title
  doc.setFontSize(18);
  doc.setTextColor(0, 0, 0);
  doc.text(meeting.title, 20, 45);
  
  // Add date and time
  doc.setFontSize(12);
  doc.setTextColor(75, 85, 99);
  const formattedStartDate = format(meeting.startTime, 'MMMM dd, yyyy');
  const formattedStartTime = format(meeting.startTime, 'h:mm a');
  const formattedEndTime = format(meeting.endTime, 'h:mm a');
  doc.text(`Date: ${formattedStartDate}`, 20, 55);
  doc.text(`Time: ${formattedStartTime} - ${formattedEndTime}`, 20, 62);
  
  // Add location if available
  if (meeting.location) {
    doc.text(`Location: ${meeting.location}`, 20, 69);
  }
  
  // Add recurring information if applicable
  if (meeting.isRecurring && meeting.recurringPattern) {
    doc.text(`Recurring: ${meeting.recurringPattern}`, 20, 76);
  }
  
  // Add description
  if (meeting.description && meeting.description.length > 0) {
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Description', 20, 90);
    
    doc.setFontSize(12);
    doc.setTextColor(75, 85, 99);
    
    // Break long description into multiple lines if needed
    const splitDescription = doc.splitTextToSize(meeting.description, 170);
    doc.text(splitDescription, 20, 97);
  }
  
  // Add participants if available
  if (meeting.participants && meeting.participants.length > 0) {
    const yPos = meeting.description ? 120 : 90;
    
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Participants', 20, yPos);
    
    doc.setFontSize(12);
    doc.setTextColor(75, 85, 99);
    
    meeting.participants.forEach((participant, index) => {
      doc.text(`• ${participant}`, 25, yPos + 7 + (index * 7));
    });
  }
  
  // Add notes if available
  if (meeting.notes && meeting.notes.length > 0) {
    const yPos = (meeting.participants && meeting.participants.length > 0) 
      ? 120 + (meeting.participants.length * 7) 
      : (meeting.description ? 130 : 90);
    
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Notes', 20, yPos);
    
    doc.setFontSize(12);
    doc.setTextColor(75, 85, 99);
    
    meeting.notes.forEach((note, index) => {
      doc.text(`• ${note}`, 25, yPos + 7 + (index * 7));
    });
  }
  
  // Add reminder information
  if (meeting.reminders && meeting.reminders.length > 0) {
    const yPos = 170;
    
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Reminders', 20, yPos);
    
    doc.setFontSize(12);
    doc.setTextColor(75, 85, 99);
    
    meeting.reminders.forEach((reminder, index) => {
      const formattedTime = format(reminder.time, 'MMM dd, yyyy - h:mm a');
      doc.text(`• ${reminder.type}: ${formattedTime}`, 25, yPos + 7 + (index * 7));
    });
  }
  
  // Add footer
  doc.setFontSize(10);
  doc.setTextColor(107, 114, 128);
  doc.text('Generated by MeetEase Calendar', 105, 280, { align: 'center' });
  doc.text(`Generated on: ${format(new Date(), 'MMMM dd, yyyy')}`, 105, 285, { align: 'center' });
  
  // Download the PDF
  doc.save(`meeting-${meeting.title.replace(/\s+/g, '-').toLowerCase()}-${format(meeting.startTime, 'yyyy-MM-dd')}.pdf`);
};

// Function to export multiple meetings to a single PDF
export const exportMeetingsToPDF = (meetings: Meeting[]): void => {
  // Initialize jsPDF
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  // Add title
  doc.setFontSize(22);
  doc.setTextColor(59, 130, 246); // Blue color
  doc.text('Meeting Schedule', 105, 20, { align: 'center' });
  
  // Add logo or branding
  doc.setFontSize(14);
  doc.setTextColor(107, 114, 128); // Gray color
  doc.text('MeetEase', 105, 30, { align: 'center' });
  
  // Sort meetings by date
  const sortedMeetings = [...meetings].sort((a, b) => 
    a.startTime.getTime() - b.startTime.getTime()
  );
  
  // Create table data
  const tableData = sortedMeetings.map(meeting => [
    format(meeting.startTime, 'MMM dd, yyyy'),
    format(meeting.startTime, 'h:mm a') + ' - ' + format(meeting.endTime, 'h:mm a'),
    meeting.title,
    meeting.location || '',
    meeting.isRecurring ? 'Yes' : 'No'
  ]);
  
  // @ts-ignore - jspdf-autotable extends jsPDF
  doc.autoTable({
    startY: 40,
    head: [['Date', 'Time', 'Title', 'Location', 'Recurring']],
    body: tableData,
    theme: 'grid',
    styles: { fontSize: 10 },
    headStyles: { fillColor: [59, 130, 246] },
    alternateRowStyles: { fillColor: [240, 245, 255] },
  });
  
  // Add footer
  doc.setFontSize(10);
  doc.setTextColor(107, 114, 128);
  doc.text('Generated by MeetEase Calendar', 105, 280, { align: 'center' });
  doc.text(`Generated on: ${format(new Date(), 'MMMM dd, yyyy')}`, 105, 285, { align: 'center' });
  
  // Download the PDF
  doc.save(`meetings-schedule-${format(new Date(), 'yyyy-MM-dd')}.pdf`);
};

